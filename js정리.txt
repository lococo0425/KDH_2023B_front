JAVA vs JAVAScript

자바 스크립트로 할수 있는 것들 
    1.웹 클라이언트(서비스를 제공 받는) [HTML,CSS,JS]
    2.웹 서버(서비스를 제공 하는)[node.js] vs JAVA(spring)
    3.모바일[react native]
    4.데스크톱 애플리케이션[NW.js] vs JAVA(spring)
    5.데이터베이스 관리[NOSQL] vs SQL

-텍스트 에디터
    프론트엔드 : VScode, 아톰 등등(회사 마다 다름)
    백엔드   : 이클립스 인텔리제이

-브라우저[클라이언트 입장]
    크롬, 엣지, 사파리 등등


*오류 찾기!!! 
    -오류 가 나왔다면 한번 읽어보고 모르겠다? → 구글링!
    (GTP 함부로 사용 금지 → 실력 상승 x)


-기본용어
    부호                :
    코드                : 정보를 다른 형태로 변환하는 규칙 
    표현식              : 하나 이상의 값/정보 으로 표현될 수 있는 코드를 의미
    문장                : 표현식이 하나 이상 모인것(명령문)
    프로그램            : 문장이 모인것(명령문의 집합)
    프로세스            : 현재 실행중인 프로그램(스케줄링/스레드)
    웹/어플리케이션     : 웹에서 사용하는 프로그램
    응용프로그램        : 사용자가 사용할수 있도록 만든 프로그램(=어플리케이션)



                                                                           > 웹 어플리케이션
    부호 > 코드 > 표현식 > 문장 > 프로그램 > 프로세스         사용처에 따라    > 앱 어플리케이션      
                                                                           > 데스크탑 어플리케이션


개발자/사람                        컴퓨터
<div> -----------명령어----------> [번역] 01011101000011010
박스모델 <-------실행결과----------

-키워드 : 언어들이 미리 만든 단어들.
    !! : 키워드와 동일하게 이름을 정의하지 말자!![중복되니까.]

-식별자 : 어떠한 변수/함수/명령 등을 식별하기 위한 이름.
    HTML/CSS : id class <마크업>
    JS : 변수/함수/클래스 등등
    
    1. 키워드 사용 불가    2. 숫자 시작 불가    3. 특수문자는 _ , $ 만 가능    4. 공백불가능
    관례 -> 1. 영어권장(카멜 표기법), 의미있는 이름 사용

-주석 : 코드 설명
    HTML : <!-- 주석 -->
    CSS  : /* 주석 */
    JS : // 한줄주석
        /* 여러줄 주석 */

-HTML에서 JAVAScript 적용하는 방법
	1.<script> 마크업을 이용한 스크립트 작성
	2.<head> 또는 <body> 가장 하단에 <script src=".js파일경로"> 마크업에 .js파일 불러오기

1. 입출력 방법 
	1. alert("출력하고싶은문구")								: 경고창(확인버튼)
	2. console.log("출력하고싶은문구")							: console(f12 개발자도구) 출력 함수
	3. confirm("출력하고싶은문구")								: 확인창[확인=Ture/취소=False] 버튼 출력함수
	4. prompt("출력하고싶은문구")								: 입력상자(input , 확인=ture/취소=false) 입력 함수
	5. document.write("HTML에 출력하고 싶은말")					: HTML에 출력 함수
	6. document.특정식별자.html = "HTML에 출력하고 싶은말"		 : 특정 요소/마크업 에 출력함수

2. 기본 자료형
	- 자료 : 프로그램이 처리할수 있는 모든것
	- 자료형 : 자료 형태/모양/폼 나눠 놓은 것[ 왜?  :  메모리를 효율적으로 사용하자! ]
		1.숫자(number) 2.문자열(string) 3.불(boolean)
				[불]
					1. true or false

			1.문자열 표현 방법 : 1>작은 따옴표 감싸기
								2>큰 따옴표 감싸기
				주의할점 : 1. '문자열" -> 불가능 
						  2. " ' ' "  -> 가능
						  3. ' " " '  -> 가능

			2.이스케이프/제어 문자
				1. \n : 줄바꿈
				2. \t : 들여쓰기[Tab 기능]
				3. \\ : 백슬래쉬 출력
				그외 \" , \' 연산차 출력시

			3.문자열 연산자
				문자열+문자열 			: 문자열 연결 연산자 ["문자열"+"문자열"]
				문자열[인덱스번호] 		: 문자열에서 인덱스 번째 문자 추출 
										-인덱스 :(저장된 순서번호 = 인덱스 0번에서 시작)
										"안 녕 하 세 요"
										[0][1][2][3][4]
										
										'안녕하세요'[0]		:해당 문자열내 0번째 문자 => 안
				문자열.length : 문자열내 문자 개수 
						"안녕하세요".length : 해당 문자열내 문자 개수 => 5
			
			4.숫자 자료형
				그냥 숫자 입력

3. 연산자 [연산/계산/논리 시 사용 되는 특수문자]
	
	1. 산술 연산자 : 결과값[숫자형] 출력
		+ 더하기	 - 빼기		 * 곱하기	 / 나누기	 % 나머지 		
		몫구하기
			parseInt(실수) : 정수로 변환해주는 함수
	
	2. 연결 연산자 : 
		+ 연결연산자 
	
	3. 비교 연산자 : 비교 후 true/참 혹은 false/거짓 반환
		>초과				<미만
		>=이상				<=이하
		==같다[데이터 비교]  ===같다[데이터/자료형 비교]
		!=같지않다			!==같지않다[데이터/자료형 비교]
	
	4. 관계 연산자 : 비교 연산자를 2개 이상일 때 사용 후 true/참 혹은 false/거짓 반환
		&& 이면서 면서 이고 모두 그리고 = and조건	초등학생이 사탕이면서 초콜릿 먹는다. [모두 참이면 참]
		|| 이거나 거나 또는 하나라도 	= or조건	초등학생이 사탕이거나 초콜릿 먹는다. [하나라도 참이면 참]
		!	반대 부정				   = not조건	초등학생이 사탕 빼고 먹는다.[참->거짓 / 거짓->참]

	5. 증감 연산자 : 1증가 혹은 1감소
		++ : 1증가 [++변수 : 선위증가, 변수++ : 후위증가]
		-- : 1감소 [--변수 : 선위감소, 변수-- : 후위감소]

	6. 대입연산자 : 오른쪽 데이터를 왼쪽에 넣어주기/대입
		= 대입 [변수 = 10;		10이라는 데이터를 변수에 대입]
		+= 오른쪽 데이터를 왼쪽값과 더한후에 왼쪽에 대입
		-= , *= , /= , %=  

	7. 삼항 연산자 :
		조건 ? 참 : 거짓
			- 조건 : 비교/관계 연산자
			- 참   : true 대신에 하고 싶은 코드
			- 거짓	: false 대신에 하고 싶은 코드
	
- 연산 관련 함수들
	1.parseInt()	: 정수로 변환
	2.typeof()		: 자료형 검사
	3.Number() 		: 숫자형 자료로 변환
	
***** 템플릿 문자열
	`백틱을 이용한 문자열과 데이터 표현
	1. 전체를 `백틱으로 감싼다.
	2. 데이터를 표현할 위치에 ${데이터}를 이용한다.

- 상수 와 변수
	왜?? -> 데이터를 저장하는 목적 

		상수/변수 : 1개의 자료 [숫자 문자 불] 를 저장/ 가지고 있는 상자 
		|			|
		|			|
		|	"안녕"	| --------------------> RAM[주기억 장치] 에 저장 
		|			|
		|___________|

		상수 : 항상 같은 수
			-한번 값을 넣으면 수정 할 수 없다. 
			-const : 상수 선언하는 의미 담고 있는 키워드 

		변수 : 변할 수 있는 수 
			-값을 계속 변경 할 수 있다.
			-var 또는 let  : 변수 선언하는 의미를 담고 있는 키워드

		-변수/상수 만들기
			1. 키워드 : const, let
			2. 식별 이름 : 변수/상수명 정하기 [중복없이]
			3. = : 대입
			4. 초기값
		
		-변수 상수 호출 
			-변수명 또는 상수명 작성하면 변수 또는 상수내 값 반환

		-변수 값 변경 [상수 제외]
			변수명 = 새로운값
		
		-변수/상수 값 연산


